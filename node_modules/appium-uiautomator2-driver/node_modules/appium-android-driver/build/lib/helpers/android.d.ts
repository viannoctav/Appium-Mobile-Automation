import type { AppiumServer, StringRecord } from '@appium/types';
import { ADB } from 'appium-adb';
import type { SetRequired, ValueOf } from 'type-fest';
import type { AndroidDriver, AndroidDriverCaps, AndroidDriverOpts } from '../driver';
import type { ADBDeviceInfo, ADBLaunchInfo } from './types';
import Unlocker from './unlock';
declare const CHROME_BROWSER_PACKAGE_ACTIVITY: {
    readonly chrome: {
        readonly pkg: "com.android.chrome";
        readonly activity: "com.google.android.apps.chrome.Main";
    };
    readonly chromium: {
        readonly pkg: "org.chromium.chrome.shell";
        readonly activity: ".ChromeShellActivity";
    };
    readonly chromebeta: {
        readonly pkg: "com.chrome.beta";
        readonly activity: "com.google.android.apps.chrome.Main";
    };
    readonly browser: {
        readonly pkg: "com.android.browser";
        readonly activity: "com.android.browser.BrowserActivity";
    };
    readonly 'chromium-browser': {
        readonly pkg: "org.chromium.chrome";
        readonly activity: "com.google.android.apps.chrome.Main";
    };
    readonly 'chromium-webview': {
        readonly pkg: "org.chromium.webview_shell";
        readonly activity: "org.chromium.webview_shell.WebViewBrowserActivity";
    };
    readonly default: {
        readonly pkg: "com.android.chrome";
        readonly activity: "com.google.android.apps.chrome.Main";
    };
};
declare const SETTINGS_HELPER_PKG_ID = "io.appium.settings";
declare const APP_STATE: {
    readonly NOT_INSTALLED: 0;
    readonly NOT_RUNNING: 1;
    readonly RUNNING_IN_BACKGROUND: 3;
    readonly RUNNING_IN_FOREGROUND: 4;
};
declare function ensureNetworkSpeed(adb: ADB, networkSpeed: string): string;
declare function prepareAvdArgs(adb: ADB, opts: AndroidDriverOpts): string[];
interface AndroidHelpers {
    createBaseADB(opts?: AndroidDriverOpts): Promise<ADB>;
    prepareEmulator(adb: ADB, opts?: any): Promise<void>;
    /**
     * Set and ensure the locale name of the device under test.
     *
     * @param adb - The adb module instance.
     * @param language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.
     *                            format: [a-zA-Z]{2,8}. e.g. en, ja : https://developer.android.com/reference/java/util/Locale.html
     * @param country - Country. The country (region) field is case insensitive, but Locale always canonicalizes to upper case.
     *                            format: [a-zA-Z]{2} | [0-9]{3}. e.g. US, JP : https://developer.android.com/reference/java/util/Locale.html
     * @param script - Script. The script field is case insensitive but Locale always canonicalizes to title case.
     *                            format: [a-zA-Z]{4}. e.g. Hans in zh-Hans-CN : https://developer.android.com/reference/java/util/Locale.html
     * @throws {Error} If it failed to set locale properly
     */
    ensureDeviceLocale(adb: ADB, language?: string, country?: string, script?: string): Promise<void>;
    getDeviceInfoFromCaps<Opts extends AndroidDriverOpts>(opts?: Opts): Promise<ADBDeviceInfo>;
    createADB<Opts extends AndroidDriverOpts>(opts?: Opts): Promise<ADB>;
    validatePackageActivityNames<Opts extends AndroidDriverOpts>(opts: Opts): void;
    getLaunchInfo<Opts extends AndroidDriverOpts>(adb: ADB, opts: Opts): Promise<ADBLaunchInfo | undefined>;
    resetApp<Opts extends AndroidDriverOpts>(adb: ADB, opts: SetRequired<Opts, 'appPackage' | 'app'>): Promise<void>;
    installApk<Opts extends AndroidDriverOpts>(adb: ADB, opts: SetRequired<Opts, 'appPackage' | 'app'>): Promise<void>;
    /**
     * Installs an array of apks
     * @param adb Instance of Appium ADB object
     * @param opts Opts defined in driver.js
     */
    installOtherApks<Opts extends AndroidDriverOpts>(apks: string[], adb: ADB, opts: SetRequired<Opts, 'appPackage' | 'app'>): Promise<void>;
    /**
     * Uninstall an array of packages
     * @param adb Instance of Appium ADB object
     * @param appPackages An array of package names to uninstall. If this includes `'*'`, uninstall all of 3rd party apps
     * @param filterPackages An array of packages does not uninstall when `*` is provided as `appPackages`
     */
    uninstallOtherPackages(adb: ADB, appPackages: string[], filterPackages?: string[]): Promise<void>;
    /**
     * Get third party packages filtered with `filterPackages`
     * @param adb Instance of Appium ADB object
     * @param filterPackages An array of packages does not uninstall when `*` is provided as `appPackages`
     * @returns An array of installed third pary packages
     */
    getThirdPartyPackages(adb: ADB, filterPackages?: string[]): Promise<string[]>;
    /**
     * @deprecated Use hideKeyboard instead
     */
    initUnicodeKeyboard(adb: ADB): Promise<any>;
    hideKeyboard(adb: ADB): Promise<void>;
    setMockLocationApp(adb: ADB, app: string): Promise<void>;
    resetMockLocation(adb: ADB): Promise<void>;
    installHelperApp(adb: ADB, apkPath: string, packageId: string): Promise<void>;
    /**
     * Pushes and installs io.appium.settings app.
     * Throws an error if the setting app is required
     *
     * @param adb - The adb module instance.
     * @param throwError - Whether throw an error if Settings app fails to start
     * @param opts - Driver options dictionary.
     * @throws If throwError is true and something happens in installation step
     */
    pushSettingsApp(adb: ADB, throwError: boolean, opts: AndroidDriverOpts): Promise<void>;
    /**
     * Extracts string.xml and converts it to string.json and pushes
     * it to /data/local/tmp/string.json on for use of bootstrap
     * If app is not present to extract string.xml it deletes remote strings.json
     * If app does not have strings.xml we push an empty json object to remote
     *
     * @param language - Language abbreviation, for example 'fr'. The default language
     * is used if this argument is not defined.
     * @param adb - The adb module instance.
     * @param opts - Driver options dictionary.
     * @returns The dictionary, where string resource identifiers are keys
     * along with their corresponding values for the given language or an empty object
     * if no matching resources were extracted.
     */
    pushStrings(language: string | undefined, adb: ADB, opts: AndroidDriverOpts): Promise<StringRecord>;
    unlock<D extends AndroidDriver, Caps extends AndroidDriverCaps>(driver: D, adb: ADB, capabilities: Caps): Promise<void>;
    verifyUnlock(adb: ADB, timeoutMs?: number | null): Promise<void>;
    initDevice(adb: ADB, opts: AndroidDriverOpts): Promise<string | void>;
    removeNullProperties(obj: any): void;
    truncateDecimals(number: number, digits: number): number;
    isChromeBrowser(browser?: string): boolean;
    getChromePkg(browser: string): ValueOf<typeof CHROME_BROWSER_PACKAGE_ACTIVITY>;
    removeAllSessionWebSocketHandlers(server?: AppiumServer, sessionId?: string | null): Promise<void>;
    parseArray(cap: string | string[]): string[];
    /**
     * Validate desired capabilities. Returns true if capabilities are valid
     *
     * @param caps Capabilities
     * @return Returns true if the capabilites are valid
     * @throws {Error} If the caps has invalid capability
     */
    validateDesiredCaps(caps: AndroidDriverCaps): boolean;
    /**
     * Adjust the capabilities for a browser session
     *
     * @param caps - Current capabilities object
     * !!! The object is mutated by this method call !!!
     * @returns The same possibly mutated `opts` instance.
     * No mutation is happening is the current session if
     * appPackage/appActivity caps have already been provided.
     * @privateRemarks In practice, this fn is only ever provided a `AndroidDriverOpts` object
     */
    adjustBrowserSessionCaps(caps: AndroidDriverCaps): AndroidDriverCaps;
    /**
     * Checks whether the current device under test is an emulator
     *
     * @param adb - appium-adb instance
     * @param opts - driver options mapping
     * @returns `true` if the device is an Android emulator
     */
    isEmulator(adb?: ADB, opts?: AndroidDriverOpts): boolean;
    unlocker: typeof Unlocker;
}
declare const AndroidHelpers: AndroidHelpers;
export declare const helpers: AndroidHelpers;
export { APP_STATE, SETTINGS_HELPER_PKG_ID, ensureNetworkSpeed, prepareAvdArgs };
export default AndroidHelpers;
//# sourceMappingURL=android.d.ts.map