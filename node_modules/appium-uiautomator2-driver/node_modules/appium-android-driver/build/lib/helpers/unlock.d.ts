/**
 * Unlocking helpers
 * @module
 */
import type { Capabilities, Position } from '@appium/types';
import type { AndroidDriver } from '../driver';
import type { AndroidDriverConstraints } from '../constraints';
import type { FastUnlockOptions } from './types';
import ADB from 'appium-adb';
import { TouchAction } from '../commands/types';
declare const PIN_UNLOCK = "pin";
declare const PIN_UNLOCK_KEY_EVENT = "pinWithKeyEvent";
declare const PASSWORD_UNLOCK = "password";
declare const PATTERN_UNLOCK = "pattern";
declare const FINGERPRINT_UNLOCK = "fingerprint";
interface UnlockHelpers {
    validateUnlockCapabilities: <C extends AndroidDriverConstraints>(caps: Capabilities<C>) => Capabilities<C>;
    fastUnlock(adb: ADB, opts: FastUnlockOptions): Promise<void>;
    encodePassword(key: string): string;
    stringKeyToArr(key: any): string[];
    fingerprintUnlock<C extends AndroidDriverConstraints>(adb: ADB, driver: AndroidDriver, capabilities: Capabilities<C>): Promise<void>;
    pinUnlock<C extends AndroidDriverConstraints>(adb: ADB, driver: AndroidDriver, capabilities: Capabilities<C>): Promise<void>;
    pinUnlockWithKeyEvent<C extends AndroidDriverConstraints>(adb: ADB, driver: AndroidDriver, capabilities: Capabilities<C>): Promise<void>;
    passwordUnlock<C extends AndroidDriverConstraints>(adb: ADB, driver: AndroidDriver, capabilities: Capabilities<C>): Promise<void>;
    getPatternKeyPosition(key: number, initPos: Position, piece: number): Position;
    getPatternActions(keys: string[] | number[], initPos: Position, piece: number): TouchAction[];
    patternUnlock<C extends AndroidDriverConstraints>(adb: ADB, driver: AndroidDriver, capabilities: Capabilities<C>): Promise<void>;
}
declare const UnlockHelpers: UnlockHelpers;
export { FINGERPRINT_UNLOCK, PASSWORD_UNLOCK, PATTERN_UNLOCK, PIN_UNLOCK, PIN_UNLOCK_KEY_EVENT };
export default UnlockHelpers;
//# sourceMappingURL=unlock.d.ts.map