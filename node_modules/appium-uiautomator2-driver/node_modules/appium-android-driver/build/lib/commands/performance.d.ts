export default PerformanceMixin;
export type AndroidDriver = import('../driver').AndroidDriver;
export type ADB = import('appium-adb').ADB;
export const BATTERY_KEYS: string[];
export const CPU_KEYS: readonly ["user", "kernel"];
export const MEMORY_KEYS: string[];
export const NETWORK_KEYS: string[][];
export const SUPPORTED_PERFORMANCE_DATA_TYPES: Readonly<{
    cpuinfo: "the amount of cpu by user and kernel process - cpu information for applications on real devices and simulators";
    memoryinfo: "the amount of memory used by the process - memory information for applications on real devices and simulators";
    batteryinfo: "the remaining battery power - battery power information for applications on real devices and simulators";
    networkinfo: "the network statistics - network rx/tx information for applications on real devices and simulators";
}>;
/**
 * @this {AndroidDriver}
 * @param {number} retries
 */
export function getBatteryInfo(this: import("../driver").AndroidDriver, retries?: number): Promise<string[][] | null>;
/**
 * Return the CPU information related to the given packageName.
 * It raises an exception if the dumped CPU information did not include the given packageName
 * or the format was wrong.
 * The CPU information's sampling interval depends on the device under test.
 * For example, some devices have 5 minutes interval. When you get the information
 * from 2023-02-07 11:59:40.468 to 2023-02-07 12:04:40.556, then the next will be
 * from 2023-02-07 12:04:40.556 to 2023-02-07 12:09:40.668. No process information
 * exists in the result if the process was not running during the period.
 *
 * @this {AndroidDriver}
 * @param {string} packageName The package name to get the CPU information.
 * @param {number} retries The number of retry count.
 * @returns {Promise<[typeof CPU_KEYS, [user: string, kernel: string]]>} The array of the parsed CPU upsage percentages.
 *                  e.g. ['cpuinfo', ['14.3', '28.2']]
 *                  '14.3' is usage by the user (%), '28.2' is usage by the kernel (%)
 * @throws {Error} If it failed to parse the result of dumpsys, or no package name exists.
 */
export function getCPUInfo(this: import("../driver").AndroidDriver, packageName: string, retries?: number): Promise<[typeof CPU_KEYS, [user: string, kernel: string]]>;
/**
 *
 * @this {AndroidDriver}
 * @param {string} packageName
 * @param {number} retries
 */
export function getMemoryInfo(this: import("../driver").AndroidDriver, packageName: string, retries?: number): Promise<any[][] | null>;
/**
 * @this {AndroidDriver}
 * @param {number} retries
 */
export function getNetworkTrafficInfo(this: import("../driver").AndroidDriver, retries?: number): Promise<(string | undefined)[][] | null>;
/**
 * @type {import('./mixins').PerformanceMixin & ThisType<import('../driver').AndroidDriver>}
 * @satisfies {import('@appium/types').ExternalDriver}
 */
declare const PerformanceMixin: import('./mixins').PerformanceMixin & ThisType<import('../driver').AndroidDriver>;
//# sourceMappingURL=performance.d.ts.map