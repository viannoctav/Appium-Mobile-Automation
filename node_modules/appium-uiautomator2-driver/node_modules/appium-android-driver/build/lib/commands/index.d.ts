declare const commands: {
    findCmds: import("./mixins").FindMixin & ThisType<import("../driver").AndroidDriver>;
    generalCmds: import("./mixins").GeneralMixin & ThisType<import("../driver").AndroidDriver>;
    alertCmds: Required<Pick<import("@appium/types").ExternalDriver<import("@appium/types").Constraints, string, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<import("@appium/types").Constraints>, void, import("@appium/types").StringRecord>, "getAlertText" | "setAlertText" | "postAcceptAlert" | "postDismissAlert">> & ThisType<import("../driver").AndroidDriver>;
    elementCmds: import("./mixins").ElementMixin & ThisType<import("../driver").AndroidDriver>;
    contextCmds: import("./mixins").ContextMixin & ThisType<import("../driver").AndroidDriver>;
    actionCmds: import("./mixins").ActionsMixin & ThisType<import("../driver").AndroidDriver>;
    touchCmds: import("./mixins").TouchMixin & ThisType<import("../driver").AndroidDriver>;
    imeCmds: import("./mixins").IMEMixin & ThisType<import("../driver").AndroidDriver>;
    networkCmds: import("./mixins").NetworkMixin & ThisType<import("../driver").AndroidDriver>;
    recordscreenCmds: import("./mixins").RecordScreenMixin & ThisType<import("../driver").AndroidDriver>;
    intentCmds: import("./mixins").ActivityMixin & ThisType<import("../driver").AndroidDriver>;
    screenStreamCmds: import("./mixins").StreamScreenMixin & ThisType<import("../driver").AndroidDriver>;
    performanceCmds: import("./mixins").PerformanceMixin & ThisType<import("../driver").AndroidDriver>;
    executeCmds: import("./mixins").ExecuteMixin & ThisType<import("../driver").AndroidDriver>;
    shellCmds: import("./mixins").ShellMixin & ThisType<import("../driver").AndroidDriver>;
    emuConsoleCmds: import("./mixins").EmulatorConsoleMixin & ThisType<import("../driver").AndroidDriver>;
    systemBarsCmds: import("./mixins").SystemBarsMixin & ThisType<import("../driver").AndroidDriver>;
    appManagementCmds: import("./mixins").AppManagementMixin & ThisType<import("../driver").AndroidDriver>;
    fileActionsCmds: import("./mixins").FileActionsMixin & ThisType<import("../driver").AndroidDriver>;
    logCmds: import("./mixins").LogMixin & ThisType<import("../driver").AndroidDriver>;
    mediaProjectionCmds: import("./mixins").MediaProjectionMixin & ThisType<import("../driver").AndroidDriver>;
    permissionsCmds: import("./mixins").PermissionsMixin & ThisType<import("../driver").AndroidDriver>;
    keyboardCmds: import("./mixins").KeyboardMixin & ThisType<import("../driver").AndroidDriver>;
};
export { commands };
export type * from './mixins';
//# sourceMappingURL=index.d.ts.map