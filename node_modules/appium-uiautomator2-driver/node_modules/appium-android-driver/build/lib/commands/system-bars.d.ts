export default SystemBarsMixin;
export type ADB = import('appium-adb').ADB;
export type StringRecord = import('@appium/types').StringRecord;
export type WindowProperties = import('./types').WindowProperties;
/**
 * Parses window properties from adb dumpsys output
 *
 * @param {string} name The name of the window whose properties are being parsed
 * @param {Array<string>} props The list of particular window property lines.
 * Check the corresponding unit tests for more details on the input format.
 * @param {import('@appium/types').AppiumLogger} [log] Logger instance
 * @returns {WindowProperties} Parsed properties object
 * @throws {Error} If there was an issue while parsing the properties string
 */
export function parseWindowProperties(name: string, props: Array<string>, log?: import("@appium/types").AppiumLogger | undefined): WindowProperties;
/**
 * Extracts status and navigation bar information from the window manager output.
 *
 * @param {string} lines Output from dumpsys command.
 * Check the corresponding unit tests for more details on the input format.
 * @param {import('@appium/types').AppiumLogger} [log] Logger instance
 * @return {StringRecord} An object containing two items where keys are statusBar and navigationBar,
 * and values are corresponding WindowProperties objects
 * @throws {Error} If no window properties could be parsed
 */
export function parseWindows(lines: string, log?: import("@appium/types").AppiumLogger | undefined): StringRecord;
/**
 * @type {import('./mixins').SystemBarsMixin & ThisType<import('../driver').AndroidDriver>}
 * @satisfies {import('@appium/types').ExternalDriver}
 */
declare const SystemBarsMixin: import('./mixins').SystemBarsMixin & ThisType<import('../driver').AndroidDriver>;
//# sourceMappingURL=system-bars.d.ts.map