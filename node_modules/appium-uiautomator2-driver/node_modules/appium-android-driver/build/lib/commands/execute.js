"use strict";
// @ts-check
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const mixins_1 = require("./mixins");
/**
 * @type {import('./mixins').ExecuteMixin & ThisType<import('../driver').AndroidDriver>}
 * @satisfies {import('@appium/types').ExternalDriver}
 */
const ExecuteMixin = {
    async execute(script, args) {
        if (script.match(/^mobile:/)) {
            this.log.info(`Executing native command '${script}'`);
            script = script.replace(/^mobile:/, '').trim();
            return await this.executeMobile(script, lodash_1.default.isArray(args) ? /** @type {import('@appium/types').StringRecord} */ (args[0]) : args);
        }
        if (!this.isWebContext()) {
            throw new driver_1.errors.NotImplementedError();
        }
        const endpoint = 
        /** @type {import('appium-chromedriver').Chromedriver} */ (this.chromedriver).jwproxy
            .downstreamProtocol === driver_1.PROTOCOLS.MJSONWP
            ? '/execute'
            : '/execute/sync';
        return await /** @type {import('appium-chromedriver').Chromedriver} */ (this.chromedriver).jwproxy.command(endpoint, 'POST', {
            script,
            args,
        });
    },
    async executeMobile(mobileCommand, opts = {}) {
        const mobileCommandsMapping = {
            shell: 'mobileShell',
            execEmuConsoleCommand: 'mobileExecEmuConsoleCommand',
            startLogsBroadcast: 'mobileStartLogsBroadcast',
            stopLogsBroadcast: 'mobileStopLogsBroadcast',
            changePermissions: 'mobileChangePermissions',
            getPermissions: 'mobileGetPermissions',
            performEditorAction: 'mobilePerformEditorAction',
            sensorSet: 'sensorSet',
            getDeviceTime: 'mobileGetDeviceTime',
            startScreenStreaming: 'mobileStartScreenStreaming',
            stopScreenStreaming: 'mobileStopScreenStreaming',
            getNotifications: 'mobileGetNotifications',
            listSms: 'mobileListSms',
            pushFile: 'mobilePushFile',
            pullFile: 'mobilePullFile',
            pullFolder: 'mobilePullFolder',
            deleteFile: 'mobileDeleteFile',
            isAppInstalled: 'mobileIsAppInstalled',
            queryAppState: 'mobileQueryAppState',
            activateApp: 'mobileActivateApp',
            removeApp: 'mobileRemoveApp',
            terminateApp: 'mobileTerminateApp',
            installApp: 'mobileInstallApp',
            clearApp: 'mobileClearApp',
            startService: 'mobileStartService',
            stopService: 'mobileStopService',
            startActivity: 'mobileStartActivity',
            broadcast: 'mobileBroadcast',
            getContexts: 'mobileGetContexts',
            lock: 'mobileLock',
            unlock: 'mobileUnlock',
            refreshGpsCache: 'mobileRefreshGpsCache',
            startMediaProjectionRecording: 'mobileStartMediaProjectionRecording',
            isMediaProjectionRecordingRunning: 'mobileIsMediaProjectionRecordingRunning',
            stopMediaProjectionRecording: 'mobileStopMediaProjectionRecording',
            getConnectivity: 'mobileGetConnectivity',
            setConnectivity: 'mobileSetConnectivity',
            hideKeyboard: 'hideKeyboard',
            isKeyboardShown: 'isKeyboardShown',
            deviceidle: 'mobileDeviceidle',
            setUiMode: 'mobileSetUiMode',
            getUiMode: 'mobileGetUiMode',
        };
        if (!lodash_1.default.has(mobileCommandsMapping, mobileCommand)) {
            throw new driver_1.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". ` +
                `Only ${lodash_1.default.keys(mobileCommandsMapping)} commands are supported.`);
        }
        return await this[mobileCommandsMapping[mobileCommand]](opts);
    },
};
(0, mixins_1.mixin)(ExecuteMixin);
exports.default = ExecuteMixin;
//# sourceMappingURL=execute.js.map