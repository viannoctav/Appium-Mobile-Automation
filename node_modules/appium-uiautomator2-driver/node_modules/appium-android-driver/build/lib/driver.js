"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AndroidDriver = exports.androidCommands = void 0;
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const constraints_1 = __importDefault(require("./constraints"));
const helpers_1 = require("./helpers");
const method_map_1 = require("./method-map");
class AndroidDriver extends driver_1.BaseDriver {
    constructor(opts = {}, shouldValidateCaps = true) {
        super(opts, shouldValidateCaps);
        this.locatorStrategies = [
            'xpath',
            'id',
            'class name',
            'accessibility id',
            '-android uiautomator',
        ];
        this.desiredCapConstraints = lodash_1.default.cloneDeep(constraints_1.default);
        this.sessionChromedrivers = {};
        this.jwpProxyActive = false;
        this.apkStrings = {};
        this.unlocker = helpers_1.helpers.unlocker;
        this.curContext = this.defaultContextName();
        this.opts = opts;
    }
    isEmulator() {
        return helpers_1.helpers.isEmulator(this.adb, this.opts);
    }
    get isChromeSession() {
        return helpers_1.helpers.isChromeBrowser(String(this.opts.browserName));
    }
}
exports.AndroidDriver = AndroidDriver;
AndroidDriver.newMethodMap = method_map_1.newMethodMap;
var commands_1 = require("./commands");
Object.defineProperty(exports, "androidCommands", { enumerable: true, get: function () { return commands_1.commands; } });
//# sourceMappingURL=driver.js.map