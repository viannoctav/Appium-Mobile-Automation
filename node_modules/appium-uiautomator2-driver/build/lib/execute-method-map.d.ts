/**
 * @privateRemarks This was created by hand from the type definitions in `lib/commands` here and in `appium-android-driver`.
 * @module
 */
export declare const executeMethodMap: {
    readonly 'mobile: shell': {
        readonly command: "mobileShell";
        readonly params: {
            readonly required: readonly ["command"];
            readonly optional: readonly ["args", "timeout", "includeStderr"];
        };
    };
    readonly 'mobile: execEmuConsoleCommand': {
        readonly command: "mobileExecEmuConsoleCommand";
        readonly params: {
            readonly required: readonly ["command"];
            readonly optional: readonly ["execTimeout", "connTimeout", "initTimeout"];
        };
    };
    readonly 'mobile: dragGesture': {
        readonly command: "mobileDragGesture";
        readonly params: {
            readonly optional: readonly ["elementId", "startX", "startY", "endX", "endY", "speed"];
        };
    };
    readonly 'mobile: flingGesture': {
        readonly command: "mobileFlingGesture";
        readonly params: {
            readonly required: readonly ["direction"];
            readonly optional: readonly ["elementId", "left", "top", "width", "height", "speed"];
        };
    };
    readonly 'mobile: doubleClickGesture': {
        readonly command: "mobileDoubleClickGesture";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y"];
        };
    };
    readonly 'mobile: clickGesture': {
        readonly command: "mobileClickGesture";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y"];
        };
    };
    readonly 'mobile: longClickGesture': {
        readonly command: "mobileLongClickGesture";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y", "duration"];
        };
    };
    readonly 'mobile: pinchCloseGesture': {
        readonly command: "mobilePinchCloseGesture";
        readonly params: {
            readonly required: readonly ["percent"];
            readonly optional: readonly ["elementId", "left", "top", "width", "height", "speed"];
        };
    };
    readonly 'mobile: pinchOpenGesture': {
        readonly command: "mobilePinchOpenGesture";
        readonly params: {
            readonly required: readonly ["percent"];
            readonly optional: readonly ["elementId", "left", "top", "width", "height", "speed"];
        };
    };
    readonly 'mobile: swipeGesture': {
        readonly command: "mobileSwipeGesture";
        readonly params: {
            readonly required: readonly ["direction", "percent"];
            readonly optional: readonly ["elementId", "left", "top", "width", "height", "speed"];
        };
    };
    readonly 'mobile: scrollGesture': {
        readonly command: "mobileScrollGesture";
        readonly params: {
            readonly required: readonly ["direction", "percent"];
            readonly optional: readonly ["elementId", "left", "top", "width", "height", "speed"];
        };
    };
    readonly 'mobile: scrollBackTo': {
        readonly command: "mobileScrollBackTo";
        readonly params: {
            readonly required: readonly ["elementId", "elementToId"];
        };
    };
    readonly 'mobile: scroll': {
        readonly command: "mobileScroll";
        readonly params: {
            readonly required: readonly ["strategy", "selector"];
            readonly optional: readonly ["elementId", "maxSwipes", "element"];
        };
    };
    readonly 'mobile: viewportScreenshot': {
        readonly command: "mobileViewportScreenshot";
    };
    readonly 'mobile: viewportRect': {
        readonly command: "mobileViewPortRect";
    };
    readonly 'mobile: deepLink': {
        readonly command: "mobileDeepLink";
        readonly params: {
            readonly required: readonly ["url", "package"];
            readonly optional: readonly ["waitForLaunch"];
        };
    };
    readonly 'mobile: startLogsBroadcast': {
        readonly command: "mobileStartLogsBroadcast";
    };
    readonly 'mobile: stopLogsBroadcast': {
        readonly command: "mobileStopLogsBroadcast";
    };
    readonly 'mobile: deviceidle': {
        readonly command: "mobileDeviceidle";
        readonly params: {
            readonly required: readonly ["action"];
            readonly optional: readonly ["packages"];
        };
    };
    readonly 'mobile: acceptAlert': {
        readonly command: "mobileAcceptAlert";
        readonly params: {
            readonly optional: readonly ["buttonLabel"];
        };
    };
    readonly 'mobile: dismissAlert': {
        readonly command: "mobileDismissAlert";
        readonly params: {
            readonly optional: readonly ["buttonLabel"];
        };
    };
    readonly 'mobile: batteryInfo': {
        readonly command: "mobileGetBatteryInfo";
    };
    readonly 'mobile: deviceInfo': {
        readonly command: "mobileGetDeviceInfo";
    };
    readonly 'mobile: getDeviceTime': {
        readonly command: "mobileGetDeviceTime";
        readonly params: {
            readonly optional: readonly ["format"];
        };
    };
    readonly 'mobile: changePermissions': {
        readonly command: "mobileChangePermissions";
        readonly params: {
            readonly required: readonly ["permissions"];
            readonly optional: readonly ["appPackage", "action", "target"];
        };
    };
    readonly 'mobile: getPermissions': {
        readonly command: "mobileGetPermissions";
        readonly params: {
            readonly optional: readonly ["type", "appPackage"];
        };
    };
    readonly 'mobile: performEditorAction': {
        readonly command: "mobilePerformEditorAction";
        readonly params: {
            readonly required: readonly ["action"];
        };
    };
    readonly 'mobile: startScreenStreaming': {
        readonly command: "mobileStartScreenStreaming";
        readonly params: {
            readonly optional: readonly ["width", "height", "bitrate", "host", "pathname", "tcpPort", "port", "quality", "considerRotation", "logPipelineDetails"];
        };
    };
    readonly 'mobile: stopScreenStreaming': {
        readonly command: "mobileStopScreenStreaming";
    };
    readonly 'mobile: getNotifications': {
        readonly command: "mobileGetNotifications";
    };
    readonly 'mobile: openNotifications': {
        readonly command: "openNotifications";
    };
    readonly 'mobile: listSms': {
        readonly command: "mobileListSms";
        readonly params: {
            readonly optional: readonly ["max"];
        };
    };
    readonly 'mobile: type': {
        readonly command: "mobileType";
        readonly params: {
            readonly required: readonly ["text"];
        };
    };
    readonly 'mobile: replaceElementValue': {
        readonly command: "mobileReplaceElementValue";
        readonly params: {
            readonly required: readonly ["elementId", "text"];
        };
    };
    readonly 'mobile: pushFile': {
        readonly command: "mobilePushFile";
        readonly params: {
            readonly required: readonly ["payload", "remotePath"];
        };
    };
    readonly 'mobile: pullFile': {
        readonly command: "mobilePullFile";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: pullFolder': {
        readonly command: "mobilePullFolder";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: deleteFile': {
        readonly command: "mobileDeleteFile";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: isAppInstalled': {
        readonly command: "mobileIsAppInstalled";
        readonly params: {
            readonly required: readonly ["appId"];
        };
    };
    readonly 'mobile: queryAppState': {
        readonly command: "mobileQueryAppState";
        readonly params: {
            readonly required: readonly ["appId"];
        };
    };
    readonly 'mobile: activateApp': {
        readonly command: "mobileActivateApp";
        readonly params: {
            readonly required: readonly ["appId"];
        };
    };
    readonly 'mobile: removeApp': {
        readonly command: "mobileRemoveApp";
        readonly params: {
            readonly required: readonly ["appId"];
            readonly optional: readonly ["timeout", "keepData"];
        };
    };
    readonly 'mobile: terminateApp': {
        readonly command: "mobileTerminateApp";
        readonly params: {
            readonly required: readonly ["appId"];
            readonly optional: readonly ["timeout"];
        };
    };
    readonly 'mobile: installApp': {
        readonly command: "mobileInstallApp";
        readonly params: {
            readonly required: readonly ["appPath"];
            readonly optional: readonly ["timeout", "keepData"];
        };
    };
    readonly 'mobile: clearApp': {
        readonly command: "mobileClearApp";
        readonly params: {
            readonly required: readonly ["appId"];
        };
    };
    readonly 'mobile: backgroundApp': {
        readonly command: "mobileBackgroundApp";
        readonly params: {
            readonly optional: readonly ["seconds"];
        };
    };
    readonly 'mobile: getCurrentActivity': {
        readonly command: "getCurrentActivity";
    };
    readonly 'mobile: getCurrentPackage': {
        readonly command: "getCurrentPackage";
    };
    readonly 'mobile: startActivity': {
        readonly command: "mobileStartActivity";
        readonly params: {
            readonly optional: readonly ["wait", "stop", "windowingMode", "activityType", "display"];
        };
    };
    readonly 'mobile: startService': {
        readonly command: "mobileStartService";
        readonly params: {
            readonly optional: readonly ["user", "intent", "action", "package", "uri", "mimeType", "identifier", "component", "categories", "extras", "flags", "wait", "stop", "windowingMode", "activityType", "display"];
        };
    };
    readonly 'mobile: stopService': {
        readonly command: "mobileStopService";
        readonly params: {
            readonly optional: readonly ["user", "intent", "action", "package", "uri", "mimeType", "identifier", "component", "categories", "extras", "flags"];
        };
    };
    readonly 'mobile: broadcast': {
        readonly command: "mobileBroadcast";
        readonly params: {
            readonly optional: readonly ["user", "intent", "action", "package", "uri", "mimeType", "identifier", "component", "categories", "extras", "flags", "receiverPermission", "allowBackgroundActivityStarts"];
        };
    };
    readonly 'mobile: getContexts': {
        readonly command: "mobileGetContexts";
    };
    readonly 'mobile: getAppStrings': {
        readonly command: "mobileGetAppStrings";
        readonly params: {
            readonly optional: readonly ["language"];
        };
    };
    readonly 'mobile: installMultipleApks': {
        readonly command: "mobileInstallMultipleApks";
        readonly params: {
            readonly required: readonly ["apks"];
            readonly optional: readonly ["options"];
        };
    };
    readonly 'mobile: lock': {
        readonly command: "mobileLock";
        readonly params: {
            readonly optional: readonly ["seconds"];
        };
    };
    readonly 'mobile: unlock': {
        readonly command: "mobileUnlock";
        readonly params: {
            readonly optional: readonly ["key", "type", "strategy", "timeoutMs"];
        };
    };
    readonly 'mobile: isLocked': {
        readonly command: "isLocked";
    };
    readonly 'mobile: refreshGpsCache': {
        readonly command: "mobileRefreshGpsCache";
        readonly params: {
            readonly optional: readonly ["timeoutMs"];
        };
    };
    readonly 'mobile: startMediaProjectionRecording': {
        readonly command: "mobileStartMediaProjectionRecording";
        readonly params: {
            readonly optional: readonly ["resolution", "maxDurationSec", "priority", "filename"];
        };
    };
    readonly 'mobile: isMediaProjectionRecordingRunning': {
        readonly command: "mobileIsMediaProjectionRecordingRunning";
    };
    readonly 'mobile: stopMediaProjectionRecording': {
        readonly command: "mobileStopMediaProjectionRecording";
        readonly params: {
            readonly optional: readonly ["remotePath", "user", "pass", "method", "headers", "fileFieldName", "formFields", "uploadTimeout"];
        };
    };
    readonly 'mobile: getConnectivity': {
        readonly command: "mobileGetConnectivity";
        readonly params: {
            readonly optional: readonly ["services"];
        };
    };
    readonly 'mobile: setConnectivity': {
        readonly command: "mobileSetConnectivity";
        readonly params: {
            readonly optional: readonly ["wifi", "data", "airplaneMode"];
        };
    };
    readonly 'mobile: toggleGps': {
        readonly command: "toggleLocationServices";
    };
    readonly 'mobile: isGpsEnabled': {
        readonly command: "isLocationServicesEnabled";
    };
    readonly 'mobile: hideKeyboard': {
        readonly command: "hideKeyboard";
    };
    readonly 'mobile: isKeyboardShown': {
        readonly command: "isKeyboardShown";
    };
    readonly 'mobile: pressKey': {
        readonly command: "mobilePressKey";
        readonly params: {
            readonly required: readonly ["keycode"];
            readonly optional: readonly ["metastate", "flags", "isLongPress"];
        };
    };
    readonly 'mobile: getDisplayDensity': {
        readonly command: "getDisplayDensity";
    };
    readonly 'mobile: getSystemBars': {
        readonly command: "getSystemBars";
    };
    readonly 'mobile: fingerprint': {
        readonly command: "mobileFingerprint";
        readonly params: {
            readonly required: readonly ["fingerprintId"];
        };
    };
    readonly 'mobile: sendSms': {
        readonly command: "mobileSendSms";
        readonly params: {
            readonly required: readonly ["phoneNumber", "message"];
        };
    };
    readonly 'mobile: gsmCall': {
        readonly command: "mobileGsmCall";
        readonly params: {
            readonly required: readonly ["phoneNumber", "action"];
        };
    };
    readonly 'mobile: gsmSignal': {
        readonly command: "mobileGsmSignal";
        readonly params: {
            readonly required: readonly ["strength"];
        };
    };
    readonly 'mobile: gsmVoice': {
        readonly command: "mobileGsmVoice";
        readonly params: {
            readonly required: readonly ["state"];
        };
    };
    readonly 'mobile: powerAc': {
        readonly command: "mobilePowerAc";
        readonly params: {
            readonly required: readonly ["state"];
        };
    };
    readonly 'mobile: powerCapacity': {
        readonly command: "mobilePowerCapacity";
        readonly params: {
            readonly required: readonly ["percent"];
        };
    };
    readonly 'mobile: networkSpeed': {
        readonly command: "mobileNetworkSpeed";
        readonly params: {
            readonly required: readonly ["speed"];
        };
    };
    readonly 'mobile: sensorSet': {
        readonly command: "sensorSet";
        readonly params: {
            readonly required: readonly ["sensorType", "value"];
        };
    };
    readonly 'mobile: getPerformanceData': {
        readonly command: "mobileGetPerformanceData";
        readonly params: {
            readonly required: readonly ["packageName", "dataType"];
        };
    };
    readonly 'mobile: getPerformanceDataTypes': {
        readonly command: "getPerformanceDataTypes";
    };
    readonly 'mobile: statusBar': {
        readonly command: "mobilePerformStatusBarCommand";
        readonly params: {
            readonly required: readonly ["command"];
            readonly optional: readonly ["component"];
        };
    };
    readonly 'mobile: screenshots': {
        readonly command: "mobileScreenshots";
        readonly params: {
            readonly optional: readonly ["displayId"];
        };
    };
    readonly 'mobile: scheduleAction': {
        readonly command: "mobileScheduleAction";
        readonly params: {
            readonly optional: readonly ["opts"];
        };
    };
    readonly 'mobile: getActionHistory': {
        readonly command: "mobileGetActionHistory";
        readonly params: {
            readonly optional: readonly ["opts"];
        };
    };
    readonly 'mobile: unscheduleAction': {
        readonly command: "mobileUnscheduleAction";
        readonly params: {
            readonly optional: readonly ["opts"];
        };
    };
    readonly 'mobile: getUiMode': {
        readonly command: "mobileGetUiMode";
        readonly params: {
            readonly optional: readonly ["opts"];
        };
    };
    readonly 'mobile: setUiMode': {
        readonly command: "mobileSetUiMode";
        readonly params: {
            readonly optional: readonly ["opts"];
        };
    };
};
export type Uiautomator2ExecuteMethodMap = typeof executeMethodMap;
//# sourceMappingURL=execute-method-map.d.ts.map