"use strict";
// @ts-check
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mixins_1 = require("./mixins");
const lodash_1 = __importDefault(require("lodash"));
const support_1 = require("appium/support");
/**
 * @type {import('./mixins').UIA2AppStringsMixin}
 * @satisfies {import('@appium/types').ExternalDriver}
 */
const AppStringsMixin = {
    async getStrings(language) {
        if (!language) {
            language = await this.adb.getDeviceLanguage();
            this.log.info(`No language specified, returning strings for: ${language}`);
        }
        /**
         * Clients require the resulting mapping to have both keys
         * and values of type string
         * @param {StringRecord} mapping
         */
        const preprocessStringsMap = function (mapping) {
            /** @type {StringRecord} */
            const result = {};
            for (const [key, value] of lodash_1.default.toPairs(mapping)) {
                result[key] = lodash_1.default.isString(value) ? value : JSON.stringify(value);
            }
            return result;
        };
        if (this.apkStrings[language]) {
            // Return cached strings
            return preprocessStringsMap(this.apkStrings[language]);
        }
        if (!this.opts.app && !this.opts.appPackage) {
            this.log.errorAndThrow("One of 'app' or 'appPackage' capabilities should must be specified");
            throw new Error(); // unreachable
        }
        let app = this.opts.app;
        const tmpRoot = await support_1.tempDir.openDir();
        try {
            if (!app) {
                try {
                    app = await this.adb.pullApk(/** @type {string} */ (this.opts.appPackage), tmpRoot);
                }
                catch (err) {
                    this.log.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${
                    /** @type {Error} */ (err).message}`);
                    throw new Error(); // unreachable
                }
            }
            if (!(await support_1.fs.exists(app))) {
                this.log.errorAndThrow(`The app at '${app}' does not exist`);
                throw new Error(); // unreachable
            }
            try {
                const { apkStrings } = await this.adb.extractStringsFromApk(app, language, tmpRoot);
                this.apkStrings[language] = apkStrings;
                return preprocessStringsMap(apkStrings);
            }
            catch (err) {
                this.log.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${
                /** @type {Error} */ (err).message}`);
                throw new Error(); // unreachable
            }
        }
        finally {
            await support_1.fs.rimraf(tmpRoot);
        }
    },
    /**
     * Retrives app strings from its resources for the given language
     * or the default device language.
     *
     * @returns App strings map
     */
    async mobileGetAppStrings(opts) {
        return await this.getStrings(opts?.language);
    },
};
(0, mixins_1.mixin)(AppStringsMixin);
/**
 * @typedef {import('appium-adb').ADB} ADB
 * @typedef {import('@appium/types').StringRecord} StringRecord
 */
//# sourceMappingURL=app-strings.js.map