"use strict";
/**
 * @module
 * @privateRemarks These mixins are kind of a mishmash of stuff from `appium-android-driver`,
 * @privateRemarks unique things, and stuff from `ExternalDriver`. Ideally, we should be pulling the method
 * @privateRemarks definitions right out of `ExternalDriver` whenever possible.  Also note that the mixins
 * @privateRemarks contain _more stuff than just commands or execute methods_.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mixin = void 0;
const driver_1 = require("../driver");
/**
 * This function assigns a mixin `T` to the `AndroidUiautomator2Driver` class' prototype.
 *
 * While each mixin has its own interface which is (in isolation) unrelated to
 * `AndroidUiautomator2Driver`, the constraint on this generic type `T` is that it must be a
 * partial of `AndroidUiautomator2Driver`'s interface. This enforces that it does not
 * conflict with the existing interface of `AndroidUiautomator2Driver`.  In that way, you
 * can think of it as a type guard.
 * @param mixin Mixin implementation
 */
function mixin(mixin) {
    Object.assign(driver_1.AndroidUiautomator2Driver.prototype, mixin);
}
exports.mixin = mixin;
//# sourceMappingURL=mixins.js.map