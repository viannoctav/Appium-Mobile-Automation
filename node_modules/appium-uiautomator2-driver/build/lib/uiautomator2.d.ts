export default UiAutomator2Server;
export class UiAutomator2Server {
    constructor(log: any, opts?: {});
    /** @type {string} */
    host: string;
    /** @type {number} */
    systemPort: number;
    /** @type {import('appium-adb').ADB} */
    adb: import('appium-adb').ADB;
    /** @type {boolean} */
    disableWindowAnimation: boolean;
    /** @type {boolean|undefined} */
    disableSuppressAccessibilityService: boolean | undefined;
    log: any;
    jwproxy: UIA2Proxy;
    proxyReqRes: any;
    proxyCommand: any;
    prepareServerPackage(appPath: any, appId: any, tmpRoot: any): Promise<{
        wasSigned: boolean;
        installState: import("appium-adb").InstallState;
        appPath: any;
        appId: any;
    }>;
    /**
     * Installs the apks on to the device or emulator.
     *
     * @param {number} installTimeout - Installation timeout
     */
    installServerApk(installTimeout?: number): Promise<void>;
    verifyServicesAvailability(): Promise<void>;
    startSession(caps: any): Promise<void>;
    startInstrumentationProcess(): Promise<void>;
    deleteSession(): Promise<void>;
    cleanupAutomationLeftovers(strictCleanup?: boolean): Promise<void>;
}
export const INSTRUMENTATION_TARGET: "io.appium.uiautomator2.server.test/androidx.test.runner.AndroidJUnitRunner";
export const SERVER_PACKAGE_ID: "io.appium.uiautomator2.server";
export const SERVER_TEST_PACKAGE_ID: "io.appium.uiautomator2.server.test";
declare class UIA2Proxy extends JWProxy {
    /** @type {boolean} */
    didInstrumentationExit: boolean;
    proxyCommand(url: any, method: any, body?: null): Promise<any>;
}
import { JWProxy } from 'appium/driver';
//# sourceMappingURL=uiautomator2.d.ts.map